{"role_title": "应为“部分”方法提供实施", "role_desc_en": "partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.This rule raises an issue for partial methods for which no implementation can be found in the assembly.", "role_have_noncompliant_code": "Y", "role_noncompliant_code": "\n\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n\n", "role_origin_id": "rule_RSPEC-3251", "role_id": "S3251", "role_desc": "部分方法允许在编程系统时提高程度的灵活性。此规则引发了在程序集中无法找到实现的部分方法的问题。", "role_type": "CodeSmell", "role_have_compliant_code": "", "role_compliant_code": "", "role_level": "MINOR", "role_title_en": "Implementations should be provided for \"partial\" methods"},{"role_title": "应为“部分”方法提供实施", "role_desc_en": "partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.This rule raises an issue for partial methods for which no implementation can be found in the assembly.", "role_have_noncompliant_code": "Y", "role_noncompliant_code": "\n\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n\n", "role_origin_id": "rule_RSPEC-3251", "role_id": "S3251", "role_desc": "部分方法允许在编程系统时提高程度的灵活性。此规则引发了在程序集中无法找到实现的部分方法的问题。", "role_type": "CodeSmell", "role_have_compliant_code": "", "role_compliant_code": "", "role_level": "MINOR", "role_title_en": "Implementations should be provided for \"partial\" methods"},{"role_title": "应为“部分”方法提供实施", "role_desc_en": "partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.This rule raises an issue for partial methods for which no implementation can be found in the assembly.", "role_have_noncompliant_code": "Y", "role_noncompliant_code": "\n\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n\n", "role_origin_id": "rule_RSPEC-3251", "role_id": "S3251", "role_desc": "部分方法允许在编程系统时提高程度的灵活性。此规则引发了在程序集中无法找到实现的部分方法的问题。", "role_type": "CodeSmell", "role_have_compliant_code": "", "role_compliant_code": "", "role_level": "MINOR", "role_title_en": "Implementations should be provided for \"partial\" methods"},